#!/usr/bin/env ruby

require 'active_support/inflector'
require "colorize"

LOG = "./console_log"

def ls_files()
  Dir["#{Dir.pwd}/test/fixtures/*.yml"].to_a 
end

def is_key(line)
  !line.start_with?("  ")
end

def files_to_hash(hashes={}, hash={}, values=[])
  ls_files.each do |file|
    File.open(file, "r").to_a.select{|x| !x.strip.start_with?("#")}.reverse.each do |line|
      if is_key line
        hash[line.gsub(":","")] = values.reverse 
        values = []
      else
        values.push line
      end
    end
    hashes[File.basename(file).gsub(".yml","")] = hash
    hash = {}
  end
  hashes
end

def is_relational(_key)
  files_to_hash.keys.map{|file| File.basename(file) }.include?("#{_key}".pluralize)
end

def write(x)
  if ARGV[0] == "/w"
    f = File.open(LOG, "a")
    f.puts x
    f.close
  end
  puts x
end

def count_pipe(t)
  t.split('').select {|x| x == "|" }.size 
end

def look_up(fix_target, term, option, tab="  |", suspects=[], delegates=[])
  abort "empty input." if ARGV.size < 3
  files_to_hash.each do |k, v|
    if k.start_with?(fix_target)
      result = v.keys.select{|key| key.strip == term.strip }
      delegates.push [k, result[0], v[result[0]].map{|x| x.split(": ").map{|a| a.strip}}] if result.size > 0
    end  
  end

  if delegates.size == 0 && count_pipe(tab) > 0
    suspects.push term 
  end

  yml, key, values = delegates[0]
  write "#{tab}#{yml} [#{key.chomp}]" if tab == ""
  values.each do |_key, value| 
    relational = is_relational _key
    write "#{tab}#{_key}: #{value}" if option == false || relational
    suspects = look_up(_key.pluralize, value, option, "#{tab}#{_key}|", suspects) if relational
  end if values != nil
  suspects
end

def list()
  files_to_hash.keys.each {|x|  puts x.to_s }
end

def help()
  puts "ymlook list: list fixtures"
  puts "ymlook /w [fixture_name] [key_name]: list fixture relations, open result file after the execution "
  puts "ymlook / [fixture_name] [key_name]: list fixture relations "
  puts "ymlook /: [fixture_name] [key_name]: list fixture relations (related part only) "
end

term = ARGV[0]


if File.exist?(LOG)
  system "rm #{LOG}"
end

def w()
  write "[#{ARGV[1]}]"
  write ""
end


case term
when "list"
  list
when "/:"  
  w
  look_up(ARGV[1], ARGV[2], true).each {|x| puts x.red}
when "/w"  
  w
  look_up(ARGV[1], ARGV[2], false).each {|x| puts x.red}
  system "vim #{LOG}"
when "/"  
  w
  look_up(ARGV[1], ARGV[2], false).each {|x| puts x.red}
else
  help
end
