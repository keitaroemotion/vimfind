#!/usr/bin/env ruby

require "colorize"
require "/usr/local/lib/vf/util.rb"
require "/usr/local/lib/vf/test.rb"
require "/usr/local/lib/vf/sync.rb"

option = $*[0]
files = []

def values
  ARGV.select { |x| /^[^\-]+/ =~ x }
end

def options
  ARGV.select { |x| /^[\-]+/ =~ x }
end

if option == "-a"
  files = Dir["**/*"]
else  
  target = !option.nil? && option.start_with?(":") ? option[1..-1] : "develop"
  if target == "develop" && !`git branch`.include?("develop")
    target = "master"
  end
  diff       = `git diff #{target} --name-only`
  files = diff.split("\n")
  puts "\n#{files.size.to_s.magenta} Files\n\n"
  $files_all = files.freeze
end  

def refactor_content(files, from, to)
  targets = []
  files.select{|file| File.exist?(file)}.each do |file|
    lines = File.open(file, "r").select do |line|
      line.include?(from)
    end
    lines.each do |line|
      puts "- #{line.chomp}".red
      puts "+ #{line.gsub(from, to.green).chomp}"
      puts
    end
    if lines.size > 0
      puts "[#{file.yellow}]"
      print "[ok? y/n]"
      opt = $stdin.gets.chomp.downcase
      if opt == "q"
        abort
      end
      if opt == "y"
        targets.push file
      end
    end  
  end
  puts
  targets
    .map    { |file| [file, File.read(file).gsub(from, to)] }
    .each do |file, content|
       puts "> #{file}"
       f = File.open(file, "w")
       f.puts content
       f.close
    end
  puts "\noverwritten!\n".red
end

case option 
when "refac"
  #
  # this code block looks so fucking verbose that
  # it needs to be refactored later
  #
  from = values[1]
  to   = values[2]
  puts "from: #{from} to: #{to}"

  if options.include?("-f")
    files.each do |file|
      file_name = File.basename(file)
      dir_name  = File.dirname(file)
      if file_name.include?(from)
        dest = File.join(dir_name, file_name.gsub(from, to))
        puts "- #{file}".red
        puts "+ #{dest}".green
        print "[ok? y/n]"
        opt = $stdin.gets.chomp.downcase
        if opt == "q"
          abort
        end
        if opt == "y"
          system "mv #{file} #{dest}"
        end
      end
    end
  else
    refactor_content(files, from, to)
  end
when "sync"
  Sync.sync files
when "-ld"
  Util.compare_methods(".", ARGV[1])  
when "-a"
  Util.grep files, $*[1]
  Util.open ARGV[1], files, files
when "g"
  Util.grep files, ARGV[1]
when "t"
  Util.open ARGV, files, files, true
when "/"
  Util.open ARGV[1], files, files
when "//"
  system files.inject("vim"){ |acc, file| "#{acc} #{file}" } 
when "c"  
  Util.clean files.select {|file| file.end_with?(".rb") } 
when "r"  
  files.select{|f| f.end_with?(".rb")}.each do |file|
    p = `rubocop #{file}`
    unless "#{p}".include? "no offense"
      system "rubocop #{file}"
      $stdin.gets.chomp
    end
  end
when "help", "-h", "--help"
  puts ""
  puts "-a        ... look around (grep + find)"
  puts "-ld [keyword] ... compare a function among classes"
  puts "refac [from] [to] ... refactor file contents"
  puts "refac [from] [to] -f  ... refactor file names"
  puts "sync      ... sync files"
  puts "c         ... clean"
  puts "g         ... grep"
  puts "t         ... test (ruby)"
  puts "r         ... rubocop"
  puts "/         ... open a file after reading it."
  puts "//         ... open all files after reading it."
  puts "help, -h ... help option"
  puts ""
else
  Util.open ARGV, files, files
end
