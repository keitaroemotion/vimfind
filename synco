#!/usr/bin/env ruby

require "colorize"

def operation?(arg)
  /^[\-].+$/ =~ arg
end

def operations
  ARGV.select{ |arg| operation?(arg) }
end

def values
  ARGV.select{ |arg| !operation?(arg) }
end

def ask(msg)
  print "[#{msg}:] "
  input = $stdin.gets.chomp.downcase
  abort if input == "q"
  input
end

def ask_branch(msg, branches, allow_one)
  branches = branches.size == 0 ? $branches : branches
  show_branches branches
  print "[#{msg}:] "
  input = $stdin.gets.chomp.downcase
  abort if input == "q"
  if /^[\d\s]+$/ =~ input
    branches = input.split(/\s/).map { |i| branches[i.to_i] }
  else
    branches = branches
                 .select {|branch| branch.include?(input) }
                 .map {|branch| branch.strip }
  end
  (!allow_one || (allow_one && branches.size == 1)) ? branches : ask_branch(msg, branches, allow_one)
end

def show_branches(branches)
  branches.each_with_index do |branch, i|
    puts "[#{i}] #{branch}" 
  end
end

def get_files(files)
  print("[key words:] ") 
  opt = $stdin.gets.chomp.downcase
  return files if opt == "q"
  key_words = opt.split(/\s/)
  flag = false
  $files.push(files.flatten
    .select {|file| File.file?(file)}
    .select do |file|
      key_words.select{|key_word| file.include?(key_word)}.size == key_words.size
    end.map do |file|
      unless flag
        puts "#{file}".green
        print("add?[Y/n]") 
        opt = $stdin.gets.chomp.downcase
      end  
      case opt
      when "q"
        flag = true
        nil
      when "y"  
        file 
      else  
        nil
      end  
    end.flatten.compact)
   print "need more?[Y/n] "  
   get_files(Dir["./**/*"]) if $stdin.gets.chomp.downcase == "y" 
end

$dir = "/usr/local/etc/vf/keys"

def get_branches
  $branches = `git branch`.split(/\n/)

  $current_branch = $branches
    .select{ |b| b.start_with?("*") }.first
    .gsub("* ", "")
end

def add_story
  system "mkdir -p #{$dir}"
  get_branches
  from_branch = ask_branch("from".cyan, $branches, true).first
  puts "from: #{from_branch}".green
  to_branches = ask_branch("to(*)".cyan, $branches, false)
                  .map{|branch| branch.delete("*").strip }
  to_branches.each do |to_branch|
    puts "to:   #{to_branch}".cyan
  end  
  $files = []
  get_files(Dir["./**/*"])
  $files.flatten.each do |file|
    puts file.yellow
  end

  name = ask("name of this pattern")
  file_name = File.join($dir, name + ".pat")
  f = File.open(file_name, "w")
  f.puts "from: #{from_branch}"
  to_branches.each do |branch|
    f.puts "to: #{branch}"
  end
  $files.flatten.each do |file|
    f.puts "file: #{file}"
  end
  f.close
  system "cat #{file_name}"
end

def swap(branches_to, branch_from, files)
  get_branches
  extra = operations.include?("-p") ? ";git push origin HEAD" : ""
  branches_to.each do |branch|
    command = [
      "git checkout #{branch}",
      files.map {|file| "git checkout #{branch_from} #{file}" }.join(";"),
      files.map {|file|"git add #{file}"}.join(";"),
      "git commit -m 'unmerged files updated'#{extra}",
    ].join(";")

    puts
    command.split(";").each do |c|
      puts "> #{c.cyan}"
    end
    puts

    system command
  end
  puts "git co #{$current_branch}".yellow
  system "git co #{$current_branch}"
end 

case operations.first
when "-h"
  puts
  puts "synco -h ... help menu"
  puts "synco -a ... add pattern"
  puts "synco [pattern] ... sync with pattern"
  puts "synco [pattern] -p ... sync with pattern and push afterwards"
  puts "synco -l ... list patterns"
  puts
when "-a"
  add_story
when "-l"  
  Dir["#{$dir}/*"].each do |x|
    puts File.basename(x).gsub(".pat", "")
  end
else 
  lines = File.open(File.join($dir, values.first) + ".pat", "r").to_a
  puts lines
  from  = lines.select{|line| /^from\:\s.+/ =~ line }.first.split(": ")[1].chomp
  to    = lines
            .select { |line| /^to\:\s.+/ =~ line       }
            .map    { |line| line.split(": ")[1].chomp }
  files = lines
            .select { |line| /^file\:\s.+/ =~ line     }
            .map    { |line| line.split(": ")[1].chomp }

  puts from.green
  puts to.to_s.cyan
  puts files.to_s.magenta

  swap(to, from, files) 
end
