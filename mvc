#!/usr/bin/env ruby

require "colorize"

terms = ARGV[0..-1]

controller = "app/controllers"
model      = "app/models"
view       = "app/views"

def filter(dir, terms, precise=nil)
  Dir["#{dir}/**/*"].select do |file|
    (terms.select do |term|
      if precise
        !Regexp.new("^#{term}#{precise}$").match(File.basename(file)).nil?
      else
        File.basename(file).include?(term) 
      end  
    end.size) == terms.size
  end
end

models = filter(model, terms)

if models.empty?
  abort "no matches."
end

if models.size > 1 
  models.each_with_index do |x, i|
    puts "#{i}: #{x.green}"
  end
  print "[which one?:] "
  models = [models[$stdin.gets.chomp.to_i]]
end

model = models[0]
term = File.basename(model).gsub(".rb","")
puts
puts "#{term.magenta} #{model}"

controllers = filter(controller, ["#{term}s"], "*_controller\.rb")

if controllers.empty?
  abort "controller missing."
end

def collect_publics(c)
  lines = []
  File.open(c, "r").to_a.each do |line|
    if line.strip == "private"
      return lines      
    end
    lines.push line
  end
  lines
end

controllers = controllers.map do |c|
  puts "#{File.dirname(c).yellow}/#{File.basename(c).cyan}"
  collect_publics(c).select do |line|
    line.strip.start_with?("def ")
  end.map do |line|
    line.strip.gsub("def ", "").split(";")[0]
  end.flatten
end.flatten

views = filter(view, ["#{term}s"], "")

if views.empty?
  abort "view missing."
end

views = views.map do |v|
  puts "#{File.dirname(v).green}/#{File.basename(v).cyan}"
  Dir["#{v}/**/*"].map do |file|
    File.basename(file)
      .gsub(".html.erb", "")
      .gsub(".xml.erb", "")
  end.map do |x|
    x
  end
end.flatten

def routes(term)
  File.open("config/routes.rb").to_a.select do |line|
    line.include?(":#{term},") ||
    line.include?(":#{term}s,")
  end.map do |x|
    x.strip
     .gsub("only","only")
     .gsub("resources","resources")
     .gsub("resource ","resource ")
     .gsub(" do", "")
     .gsub("[","")
     .gsub("]","")
     .gsub(":","")
     .strip
     .split((/[\s,]/))
  end.flatten.select do |x|
     !["only", "resources", "#{term}s"].include?(x) &&
     x != ""
  end
end  

def routes?(x, r)
  if r.include? x
    "(+) #{x} "
  else    
    "( ) #{x}"
  end
end

def show(x, y, term)
  r = routes term
  pair = x.size > y.size ? [x, y] : [y, x]
  bigger = pair[0]
  smaller = pair[1]

  bigger.each do |v|
    if smaller.include?(v)
      puts routes?(v, r).green
    else
      puts routes?(v, r).red
    end
  end

  smaller.each do |s|
    if !bigger.include?(s)
      puts routes?(s, r).red
    end
  end
end

show views, controllers, term

puts "* ... #{"green".green} means the action has been defined both in view and controller"
puts "* ... '+' means the action has been included in routes"
puts
